resource_types:
- name: registry-image-beta
  type: registry-image
  source: {repository: concourse/registry-image-resource}

groups:
- name: develop
  jobs:
  - unit
  - testflight
  - watsjs

- name: images
  jobs:
  - unit-image
  - dev-image

jobs:
- name: unit
  public: true
  serial: true
  plan:
  - aggregate:
    - get: concourse
      trigger: true
    - get: unit-image
    - get: builder
  - task: make
    image: unit-image
    file: concourse/ci/tasks/make.yml
  - aggregate:
    - task: unit
      image: unit-image
      file: concourse/ci/tasks/unit.yml
      input_mapping: {concourse: built-concourse}
    - task: fly-darwin
      file: concourse/ci/tasks/fly-darwin.yml
    - task: fly-windows
      file: concourse/ci/tasks/fly-windows.yml
  - task: build
    image: builder
    privileged: true
    input_mapping: {source: built-concourse}
    config:
      platform: linux
      params:
        REPOSITORY: concourse/build
        TAG: latest
        CONTEXT: ci/dockerfiles/unit
        DOCKERFILE: ci/dockerfiles/unit/Dockerfile
      inputs: [{name: source}]
      outputs: [{name: image}]
      run: {path: /kaniko/build}
  - put: build-image
    params: {image: image/image.tar}

- name: testflight
  public: true
  max_in_flight: 2
  plan:
  - aggregate:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: unit-image
      passed: [unit]
    - get: build-image
      passed: [unit]
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
  - task: testflight
    image: unit-image
    privileged: true
    file: concourse/ci/tasks/docker-compose-testflight.yml

- name: watsjs
  public: true
  max_in_flight: 2
  plan:
  - aggregate:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: unit-image
      passed: [unit]
    - get: build-image
      passed: [unit]
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
  - task: watsjs
    image: unit-image
    privileged: true
    file: concourse/ci/tasks/docker-compose-watsjs.yml

- name: unit-image
  public: true
  serial: true
  plan:
  - aggregate:
    - get: concourse
      resource: unit-dockerfile
      trigger: true
    - get: golang-1.x
      trigger: true
      params: {save: true}
  - put: unit-image-build
    params:
      load_base: golang-1.x
      build: concourse/ci/dockerfiles/unit

- name: dev-image
  public: true
  serial: true
  plan:
  - aggregate:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: gdn
      trigger: true
    - get: dumb-init
      trigger: true
    - get: mock-resource
      trigger: true
    - get: registry-image-resource
      trigger: true
    - get: git-resource
      trigger: true
    - get: time-resource
      trigger: true
    - get: golang-1.x
      trigger: true
      params: {save: true}
    - get: dev-image-build
      params: {save: true}
  - put: dev-image-build
    params:
      load_base: golang-1.x
      cache_from: [dev-image-build]
      dockerfile: concourse/ci/dockerfiles/dev/Dockerfile
      build: .

resources:
- name: concourse
  type: git
  source:
    uri: https://github.com/concourse/concourse.git
    branch: master

- name: unit-dockerfile
  type: git
  source:
    uri: https://github.com/concourse/concourse.git
    branch: master
    paths: [ci/dockerfiles/unit]

- name: golang-1.x
  type: docker-image
  source:
    repository: golang
    tag: 1

- name: dev-image
  type: registry-image
  source: {repository: concourse/dev}

- name: build-image
  type: registry-image-beta
  source:
    repository: concourse/build
    username: ((docker.username))
    password: ((docker.password))

- name: dev-image-build
  type: docker-image
  source:
    repository: concourse/dev
    username: ((docker.username))
    password: ((docker.password))

- name: unit-image
  type: registry-image
  source: {repository: concourse/unit}

- name: unit-image-build
  type: docker-image
  source:
    repository: concourse/unit
    username: ((docker.username))
    password: ((docker.password))

- name: postgres-image
  type: registry-image
  source: {repository: postgres}

- name: dumb-init
  type: github-release
  source:
    owner: Yelp
    repository: dumb-init
    access_token: ((concourse_github_dummy.access_token))

- name: gdn
  type: github-release
  source:
    owner: cloudfoundry
    repository: garden-runc-release
    access_token: ((concourse_github_dummy.access_token))

- name: mock-resource
  type: github-release
  source:
    owner: concourse
    repository: mock-resource
    access_token: ((concourse_github_dummy.access_token))

- name: registry-image-resource
  type: github-release
  source:
    owner: concourse
    repository: registry-image-resource
    access_token: ((concourse_github_dummy.access_token))

- name: git-resource
  type: github-release
  source:
    owner: concourse
    repository: git-resource
    access_token: ((concourse_github_dummy.access_token))

- name: time-resource
  type: github-release
  source:
    owner: concourse
    repository: time-resource
    access_token: ((concourse_github_dummy.access_token))

- name: builder
  type: registry-image
  source: {repository: concourse/builder}
