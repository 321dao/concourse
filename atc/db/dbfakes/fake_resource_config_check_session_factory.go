// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	sync "sync"

	lager "code.cloudfoundry.org/lager"
	atc "github.com/concourse/concourse/atc"
	creds "github.com/concourse/concourse/atc/creds"
	db "github.com/concourse/concourse/atc/db"
)

type FakeResourceConfigCheckSessionFactory struct {
	FindOrCreateResourceConfigCheckSessionStub        func(lager.Logger, string, atc.Source, creds.VersionedResourceTypes, db.ContainerOwnerExpiries) (db.ResourceConfigCheckSession, error)
	findOrCreateResourceConfigCheckSessionMutex       sync.RWMutex
	findOrCreateResourceConfigCheckSessionArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 atc.Source
		arg4 creds.VersionedResourceTypes
		arg5 db.ContainerOwnerExpiries
	}
	findOrCreateResourceConfigCheckSessionReturns struct {
		result1 db.ResourceConfigCheckSession
		result2 error
	}
	findOrCreateResourceConfigCheckSessionReturnsOnCall map[int]struct {
		result1 db.ResourceConfigCheckSession
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceConfigCheckSessionFactory) FindOrCreateResourceConfigCheckSession(arg1 lager.Logger, arg2 string, arg3 atc.Source, arg4 creds.VersionedResourceTypes, arg5 db.ContainerOwnerExpiries) (db.ResourceConfigCheckSession, error) {
	fake.findOrCreateResourceConfigCheckSessionMutex.Lock()
	ret, specificReturn := fake.findOrCreateResourceConfigCheckSessionReturnsOnCall[len(fake.findOrCreateResourceConfigCheckSessionArgsForCall)]
	fake.findOrCreateResourceConfigCheckSessionArgsForCall = append(fake.findOrCreateResourceConfigCheckSessionArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 atc.Source
		arg4 creds.VersionedResourceTypes
		arg5 db.ContainerOwnerExpiries
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("FindOrCreateResourceConfigCheckSession", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.findOrCreateResourceConfigCheckSessionMutex.Unlock()
	if fake.FindOrCreateResourceConfigCheckSessionStub != nil {
		return fake.FindOrCreateResourceConfigCheckSessionStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findOrCreateResourceConfigCheckSessionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResourceConfigCheckSessionFactory) FindOrCreateResourceConfigCheckSessionCallCount() int {
	fake.findOrCreateResourceConfigCheckSessionMutex.RLock()
	defer fake.findOrCreateResourceConfigCheckSessionMutex.RUnlock()
	return len(fake.findOrCreateResourceConfigCheckSessionArgsForCall)
}

func (fake *FakeResourceConfigCheckSessionFactory) FindOrCreateResourceConfigCheckSessionCalls(stub func(lager.Logger, string, atc.Source, creds.VersionedResourceTypes, db.ContainerOwnerExpiries) (db.ResourceConfigCheckSession, error)) {
	fake.findOrCreateResourceConfigCheckSessionMutex.Lock()
	defer fake.findOrCreateResourceConfigCheckSessionMutex.Unlock()
	fake.FindOrCreateResourceConfigCheckSessionStub = stub
}

func (fake *FakeResourceConfigCheckSessionFactory) FindOrCreateResourceConfigCheckSessionArgsForCall(i int) (lager.Logger, string, atc.Source, creds.VersionedResourceTypes, db.ContainerOwnerExpiries) {
	fake.findOrCreateResourceConfigCheckSessionMutex.RLock()
	defer fake.findOrCreateResourceConfigCheckSessionMutex.RUnlock()
	argsForCall := fake.findOrCreateResourceConfigCheckSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeResourceConfigCheckSessionFactory) FindOrCreateResourceConfigCheckSessionReturns(result1 db.ResourceConfigCheckSession, result2 error) {
	fake.findOrCreateResourceConfigCheckSessionMutex.Lock()
	defer fake.findOrCreateResourceConfigCheckSessionMutex.Unlock()
	fake.FindOrCreateResourceConfigCheckSessionStub = nil
	fake.findOrCreateResourceConfigCheckSessionReturns = struct {
		result1 db.ResourceConfigCheckSession
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigCheckSessionFactory) FindOrCreateResourceConfigCheckSessionReturnsOnCall(i int, result1 db.ResourceConfigCheckSession, result2 error) {
	fake.findOrCreateResourceConfigCheckSessionMutex.Lock()
	defer fake.findOrCreateResourceConfigCheckSessionMutex.Unlock()
	fake.FindOrCreateResourceConfigCheckSessionStub = nil
	if fake.findOrCreateResourceConfigCheckSessionReturnsOnCall == nil {
		fake.findOrCreateResourceConfigCheckSessionReturnsOnCall = make(map[int]struct {
			result1 db.ResourceConfigCheckSession
			result2 error
		})
	}
	fake.findOrCreateResourceConfigCheckSessionReturnsOnCall[i] = struct {
		result1 db.ResourceConfigCheckSession
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigCheckSessionFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOrCreateResourceConfigCheckSessionMutex.RLock()
	defer fake.findOrCreateResourceConfigCheckSessionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceConfigCheckSessionFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ResourceConfigCheckSessionFactory = new(FakeResourceConfigCheckSessionFactory)
