// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	sync "sync"

	atc "github.com/concourse/concourse/atc"
	v2 "github.com/concourse/concourse/atc/resource/v2"
)

type FakePutEventHandler struct {
	CreatedResponseStub        func(atc.Space, atc.Version, *atc.PutResponse) error
	createdResponseMutex       sync.RWMutex
	createdResponseArgsForCall []struct {
		arg1 atc.Space
		arg2 atc.Version
		arg3 *atc.PutResponse
	}
	createdResponseReturns struct {
		result1 error
	}
	createdResponseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePutEventHandler) CreatedResponse(arg1 atc.Space, arg2 atc.Version, arg3 *atc.PutResponse) error {
	fake.createdResponseMutex.Lock()
	ret, specificReturn := fake.createdResponseReturnsOnCall[len(fake.createdResponseArgsForCall)]
	fake.createdResponseArgsForCall = append(fake.createdResponseArgsForCall, struct {
		arg1 atc.Space
		arg2 atc.Version
		arg3 *atc.PutResponse
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreatedResponse", []interface{}{arg1, arg2, arg3})
	fake.createdResponseMutex.Unlock()
	if fake.CreatedResponseStub != nil {
		return fake.CreatedResponseStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createdResponseReturns
	return fakeReturns.result1
}

func (fake *FakePutEventHandler) CreatedResponseCallCount() int {
	fake.createdResponseMutex.RLock()
	defer fake.createdResponseMutex.RUnlock()
	return len(fake.createdResponseArgsForCall)
}

func (fake *FakePutEventHandler) CreatedResponseArgsForCall(i int) (atc.Space, atc.Version, *atc.PutResponse) {
	fake.createdResponseMutex.RLock()
	defer fake.createdResponseMutex.RUnlock()
	argsForCall := fake.createdResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePutEventHandler) CreatedResponseReturns(result1 error) {
	fake.CreatedResponseStub = nil
	fake.createdResponseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePutEventHandler) CreatedResponseReturnsOnCall(i int, result1 error) {
	fake.CreatedResponseStub = nil
	if fake.createdResponseReturnsOnCall == nil {
		fake.createdResponseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createdResponseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePutEventHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createdResponseMutex.RLock()
	defer fake.createdResponseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePutEventHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.PutEventHandler = new(FakePutEventHandler)
