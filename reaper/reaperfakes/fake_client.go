// Code generated by counterfeiter. DO NOT EDIT.
package reaperfakes

import (
	"sync"

	"github.com/concourse/worker/reaper"
)

type FakeClient struct {
	DestroyContainersStub        func(handles []string) error
	destroyContainersMutex       sync.RWMutex
	destroyContainersArgsForCall []struct {
		handles []string
	}
	destroyContainersReturns struct {
		result1 error
	}
	destroyContainersReturnsOnCall map[int]struct {
		result1 error
	}
	PingStub        func() error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns     struct {
		result1 error
	}
	pingReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) DestroyContainers(handles []string) error {
	var handlesCopy []string
	if handles != nil {
		handlesCopy = make([]string, len(handles))
		copy(handlesCopy, handles)
	}
	fake.destroyContainersMutex.Lock()
	ret, specificReturn := fake.destroyContainersReturnsOnCall[len(fake.destroyContainersArgsForCall)]
	fake.destroyContainersArgsForCall = append(fake.destroyContainersArgsForCall, struct {
		handles []string
	}{handlesCopy})
	fake.recordInvocation("DestroyContainers", []interface{}{handlesCopy})
	fake.destroyContainersMutex.Unlock()
	if fake.DestroyContainersStub != nil {
		return fake.DestroyContainersStub(handles)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.destroyContainersReturns.result1
}

func (fake *FakeClient) DestroyContainersCallCount() int {
	fake.destroyContainersMutex.RLock()
	defer fake.destroyContainersMutex.RUnlock()
	return len(fake.destroyContainersArgsForCall)
}

func (fake *FakeClient) DestroyContainersArgsForCall(i int) []string {
	fake.destroyContainersMutex.RLock()
	defer fake.destroyContainersMutex.RUnlock()
	return fake.destroyContainersArgsForCall[i].handles
}

func (fake *FakeClient) DestroyContainersReturns(result1 error) {
	fake.DestroyContainersStub = nil
	fake.destroyContainersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DestroyContainersReturnsOnCall(i int, result1 error) {
	fake.DestroyContainersStub = nil
	if fake.destroyContainersReturnsOnCall == nil {
		fake.destroyContainersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.destroyContainersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Ping() error {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	fake.recordInvocation("Ping", []interface{}{})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pingReturns.result1
}

func (fake *FakeClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeClient) PingReturns(result1 error) {
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) PingReturnsOnCall(i int, result1 error) {
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.destroyContainersMutex.RLock()
	defer fake.destroyContainersMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reaper.Client = new(FakeClient)
