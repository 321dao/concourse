<%=
  my_ip = spec.networks.send(p("network_name")).ip

  server = p("consul.agent.mode") == "server"
  lan_servers = p("consul.agent.servers.lan")

  config = {
    "datacenter" => p("consul.agent.datacenter"),
    "data_dir" => "/var/vcap/store/consul-agent",
    "log_level" => p("consul.agent.log_level"),
    "node_name" => "#{name}-#{spec.index}",
    "server" => server,
    "ports" => {
      "dns" => 53,
    },

    # explicitly listen and advertise this job's IP; otherwise consul will pick
    # an external IP, and possibly pick the wrong one (e.g. if containers are
    # running on the VM)
    "bind_addr" => my_ip,

    # without this, a single bootstrapped server will be orphaned after
    # restarting
    "rejoin_after_leave" => true
  }

  if server
    if lan_servers.empty?
      config["bootstrap"] = true
    else
      config["bootstrap_expect"] = lan_servers.size
    end
  else
    config["start_join"] = lan_servers
  end

  config.to_json
%>
