#!/bin/bash
# vim: set ft=sh

set -e

<%
  require "shellwords"

  def esc(x)
    Shellwords.shellescape(x)
  end
%>

RUN_DIR=/var/vcap/sys/run/atc
LOG_DIR=/var/vcap/sys/log/atc
SIGNING_KEY=/var/vcap/packages/generated_signing_key/id_rsa
PIDFILE=$RUN_DIR/atc.pid

source /var/vcap/packages/pid_utils/pid_utils.sh

<%
  my_addr = link("atc").instances.find { |i| i.id == spec.id }.address

  postgres_addr = ""

  if_p("atc.postgresql.address") do |addr|
    postgres_addr = addr
  end

  if postgres_addr.empty?
    postgres_node = link("db").instances.first
    postgres_addr = "#{postgres_node.address}:5432" # TODO: #{postgres_node.p("postgresql.listen_port")}"
  end

  postgres_role_name = p("atc.postgresql.role.name")
  postgres_role_password = p("atc.postgresql.role.password")
  postgres_database = p("atc.postgresql.database")
%>

case $1 in

  start)
    pid_guard $PIDFILE "atc"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    echo $$ > /var/vcap/sys/run/atc/atc.pid

    chown vcap:vcap $SIGNING_KEY
    chmod 0400 $SIGNING_KEY

    exec chpst -u vcap:vcap /var/vcap/packages/atc/bin/atc \
      --bind-ip <%= p("atc.web_bind_ip") %> \
      --bind-port <%= p("atc.web_bind_port") %> \
      --peer-url <%= p("atc.peer_url", "http://#{my_addr}:#{p("atc.web_bind_port")}") %> \
      --external-url <%= esc(p("atc.external_url")) %> \
      --postgres-data-source <%= esc("postgres://#{postgres_role_name}:#{postgres_role_password}@#{postgres_addr}/#{postgres_database}?sslmode=disable") %> \
      <% if p("atc.publicly_viewable") %> \
      --publicly-viewable \
      <% end %> \
      <% if p("atc.development_mode") %> \
      --development-mode \
      <% end %> \
      --basic-auth-username <%= esc(p("atc.basic_auth_username")) %> \
      --basic-auth-password <%= esc(p("atc.basic_auth_password")) %> \
      <% p("atc.github_auth.authorize").each do |a| %> \
        <% if org = a["organization"] %> \
          <% if a["teams"] == "all" %> \
      --github-auth-organization <%= esc(org) %> \
          <% elsif a["teams"].respond_to?(:each) %> \
            <% a["teams"].each do |team| %> \
      --github-auth-team <%= esc("#{org}/#{team}") %> \
            <% end %> \
          <% elsif a["teams"].nil? %> \
            <% raise "teams for organization '#{org}' must be specified; use 'all' for all teams" %> \
          <% else %> \
            <% raise "invalid teams for organization '#{org}': '#{a["teams"].inspect}" %> \
          <% end %> \
        <% elsif user = a["user"] %> \
      --github-auth-user <%= esc(user) %> \
        <% else %> \
          <% raise "organization or user not specified" %> \
        <% end %> \
      <% end %> \
      --github-auth-client-id <%= esc(p("atc.github_auth.client_id")) %> \
      --github-auth-client-secret <%= esc(p("atc.github_auth.client_secret")) %> \
      --session-signing-key $SIGNING_KEY \
      --resource-checking-interval <%= p("atc.default_check_interval") %> \
      --old-resource-grace-period <%= p("atc.old_resource_grace_period") %> \
      --resource-cache-cleanup-interval <%= p("atc.resource_cache_cleanup_interval") %> \
      --cli-artifacts-dir /var/vcap/packages/fly \
      --yeller-api-key <%= esc(p("atc.yeller.api_key")) %> \
      --yeller-environment <%= esc(p("atc.yeller.environment_name")) %> \
      <% if_p("atc.riemann.host", "atc.riemann.port") do |host, port| %> \
      --riemann-host <%= esc(host) %> \
      --riemann-port <%= port.to_i %> \
      <% end %> \
      --metrics-host-name <%= name %>-<%= index %> \
      --metrics-attribute <%= esc("bosh-deployment:#{spec.deployment}") %> \
      --metrics-attribute <%= esc("bosh-job:#{name}") %> \
      1>>$LOG_DIR/atc.stdout.log \
      2>>$LOG_DIR/atc.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: $0 {start|stop}"

    ;;

esac
